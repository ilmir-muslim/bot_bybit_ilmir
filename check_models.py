#!/usr/bin/env python3
import os
import sys

def load_coin_list(file_path: str) -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r') as f:
            return [line.strip().upper() for line in f if line.strip()]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: {e}")
        return ["SOL", "ARB", "BTC"]  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def check_models(coin_list):
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π:")
    missing = []
    
    for coin in coin_list:
        model_path = f"models/{coin}_neural_model.keras"
        scaler_path = f"models/{coin}_neural_model_scaler.npz"
        
        exists = os.path.exists(model_path) and os.path.exists(scaler_path)
        status = "‚úÖ" if exists else "‚ùå"
        
        print(f"{status} {coin}:")
        print(f"  ‚Ä¢ –ú–æ–¥–µ–ª—å: {model_path}")
        print(f"  ‚Ä¢ –°–∫–∞–ª–µ—Ä: {scaler_path}")
        
        if not exists:
            missing.append(coin)
    
    if missing:
        print("\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è:")
        for coin in missing:
            print(f"  ‚Ä¢ {coin}")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ:")
        for coin in missing:
            print(f"  python app/strategies/neural_network/trainer.py --symbol={coin}USDT --model_path=models/{coin}_neural_model")
    else:
        print("\nüéâ –í—Å–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞
    coin_file = "coins_list.txt"
    coins = load_coin_list(coin_file)
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–Ω–µ—Ç: {len(coins)} –∏–∑ {coin_file}")
    
    check_models(coins)