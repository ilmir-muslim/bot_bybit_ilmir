import numpy as np
import time
from app.strategies.base import Strategy
from app.strategies.ma_crossover import MovingAverageStrategy
from app.utils.log_helper import log_maker
from app.strategies.neural_network.model import NeuralPredictor

class NeuralStrategy(Strategy):
    def __init__(
        self, 
        symbol: str, 
        bybit_service, 
        model_path: str = "models/neural_model",
        base_threshold: float = 0.25,
        volatility_factor: float = 0.5,
        rotator=None,
        trading_system=None,
        interval: str = "5"
    ):
        coin = symbol.replace('USDT', '')
        self.symbol = symbol
        self.bybit = bybit_service
        self.position_coin = coin
        
        model_base_path = f"models/{coin}_neural_model"
        
        self.base_threshold = base_threshold
        self.volatility_factor = volatility_factor
        self.predictor = NeuralPredictor(
            sequence_length=30,  
            prediction_steps=3
        )
        self.rotator = rotator
        self.trading_system = trading_system
        self.interval = interval 
        
        try:
            self.predictor.load(model_base_path)
            log_maker(f"üß† –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {model_base_path}")
            log_maker(f"  ‚Ä¢ –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {self.predictor.sequence_length} —Å–≤–µ—á–µ–π")
            log_maker(f"  ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —à–∞–≥–æ–≤: {self.predictor.prediction_steps}")
            log_maker(f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥: {base_threshold:.1f}%, –ö–æ—ç—Ñ. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {volatility_factor}")
        except Exception as e:
            log_maker(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            # Fallback –Ω–∞ MA —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            self.strategy = MovingAverageStrategy(
                symbol, 
                "3", 
                rotator=rotator,
                trading_system=trading_system
            )
        
        self.min_order_qty = bybit_service.get_min_order_qty(symbol)
        log_maker(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç: {self.min_order_qty}")
        self.last_candle_time = 0

    def calculate_volatility(self, candles: list, lookback: int = 20) -> float:
        ranges = []
        for i in range(-lookback, 0):
            candle = candles[i]
            candle_range = (candle['high'] - candle['low']) / candle['close']
            ranges.append(candle_range)
        return np.mean(ranges) * 100

    def should_trade(self, candles: list) -> str:
        if not hasattr(self, 'rotator') or self.rotator is None:
            return log_maker("‚ö†Ô∏è Rotator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

        # –£–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞ —Å–≤–µ—á–∏
        # –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–æ–Ω–µ—Ç
        current_coin = self.symbol.replace('USDT', '')
        if current_coin != self.position_coin:
            return log_maker(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–æ–Ω–µ—Ç: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {current_coin} vs —Å–æ—Å—Ç–æ—è–Ω–∏–µ {self.position_coin}")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
        if len(candles) < self.predictor.sequence_length:
            return log_maker(f"üß†‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(candles)} < {self.predictor.sequence_length}")
            
            
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
            start_time = time.time()
            current_price = self.bybit.get_reliable_price(self.symbol)
            if current_price is None:
                return log_maker("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
                
                
            volatility = self.calculate_volatility(candles)
            adaptive_threshold = self.base_threshold + (volatility * self.volatility_factor)
            buy_threshold = adaptive_threshold
            sell_threshold = -adaptive_threshold
            
            data = np.array([
                [c['open'], c['high'], c['low'], c['close'], c['volume']] 
                for c in candles[-self.predictor.sequence_length:]
            ])
            
            predictions = self.predictor.predict(data)
            predicted_changes = []
            prediction_details = []
            
            for i, pred_price in enumerate(predictions, 1):
                change = (pred_price - current_price) / current_price * 100
                predicted_changes.append(change)
                prediction_details.append({
                    "step": i,
                    "price": pred_price,
                    "change_pct": change
                })
            
            max_change = max(predicted_changes, key=abs) if predicted_changes else 0
            signal = None
            reason = ""
            
            if max_change > buy_threshold:
                signal = "BUY"
                reason = f"—Ä–æ—Å—Ç +{max_change:.2f}% > –ø–æ—Ä–æ–≥–∞ {buy_threshold:.2f}%"
            elif max_change < sell_threshold:
                signal = "SELL"
                reason = f"–ø–∞–¥–µ–Ω–∏–µ {max_change:.2f}% < –ø–æ—Ä–æ–≥–∞ {sell_threshold:.2f}%"
            
            predictions_str = "\n ".join(
                [f"{p['step']} —à–∞–≥: {p['change_pct']:+.2f}%" 
                for p in prediction_details]
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ –í–°–ï–ì–î–ê
            analysis_time = time.time() - start_time
            log_text = (
                f"üß† –ê–Ω–∞–ª–∏–∑ {self.symbol} | –¶–µ–Ω–∞: {current_price:.4f} | –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2f}%\n"
                f"  ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏: BUY > {buy_threshold:.2f}%, SELL < {sell_threshold:.2f}%\n"
                f"  ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã: {predictions_str}\n"
                f"  ‚Ä¢ –ú–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {max_change:+.2f}% ({reason})\n"
                f"  ‚Ä¢ –†–µ—à–µ–Ω–∏–µ: {'–°–ò–ì–ù–ê–õ ' + signal if signal else '–ù–ï–¢ –°–ò–ì–ù–ê–õ–ê'}\n"
                f"  ‚Ä¢ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_time:.2f} —Å–µ–∫"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            coin = self.symbol.replace('USDT', '')
            position_qty = self.bybit.get_balance(coin)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–ø—É—Å–∫—É (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª)
            if signal == "SELL" and position_qty < self.min_order_qty:
                log_text += f"\n  ‚Ä¢ üß†‚è© –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–ø—É—Å–∫ SELL (–ø–æ–∑–∏—Ü–∏—è {position_qty} < {self.min_order_qty})"
                
            if signal == "BUY" and position_qty >= self.min_order_qty:
                log_text += f"\n  ‚Ä¢ üß†‚è© –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–ø—É—Å–∫ BUY (—É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è {position_qty})"
                
            log_maker(log_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
            return signal
                
        except Exception as e:
            log_maker(f"üß†‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {str(e)}")
            import traceback
            return log_maker(f"–¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
            

    def execute_trade(self, action: str, executor):
        if action == "BUY":
            log_maker(f"üß†üü¢ –ò—Å–ø–æ–ª–Ω—è—é BUY –ø–æ {self.symbol}")
            executor.execute_buy(trading_system=self.trading_system)
        elif action == "SELL":
            log_maker(f"üß†üî¥ –ò—Å–ø–æ–ª–Ω—è—é SELL –ø–æ {self.symbol}")
            executor.execute_sell(strategy=self)