import numpy as np
from app.services.bybit_service import BybitService
from app.utils.log_helper import log_maker
from typing import Dict, List, Optional, Tuple
import math
import concurrent.futures
import time

class CoinSelector:
    def __init__(self, coin_list: List[str]):
        self.coin_list = coin_list
        self.bybit = BybitService()
        self.cache: Dict[str, dict] = {}
        self.timeout = 25  # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–æ 25 —Å–µ–∫—É–Ω–¥
        self.max_workers = 4  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        self.last_update = 0
        self.update_interval = 3600  # –û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑ –≤ —á–∞—Å
        
    def calculate_volatility(self, closes: List[float]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if len(closes) < 2:
            return 0.0
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        returns = []
        for i in range(1, len(closes)):
            if closes[i-1] != 0:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                ret = (closes[i] - closes[i-1]) / closes[i-1]
                returns.append(ret)
        
        if len(returns) < 2:
            return 0.0
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        return np.std(returns) * 100
        
    def sigmoid_normalize(self, value: float, midpoint: float, steepness: float = 10) -> float:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏–≥–º–æ–∏–¥—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            x = steepness * (value - midpoint)
            # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if x > 100:
                return 1.0
            elif x < -100:
                return 0.0
            return 1 / (1 + math.exp(-x))
        except:
            return 0.5  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
    def calculate_metrics(self, symbol: str) -> Optional[dict]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞ (15-–º–∏–Ω—É—Ç–Ω—ã–µ)
                candles = self.bybit.get_candles(symbol, interval="15", limit=16)
                
                if not candles or len(candles) < 15:
                    if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        log_maker(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                        return None
                    time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue
                    
                closes = [c['close'] for c in candles]
                volumes = [c['volume'] for c in candles]
                highs = [c['high'] for c in candles]
                lows = [c['low'] for c in candles]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                volatility = self.calculate_volatility(closes)
                
                # –¢—Ä–µ–Ω–¥ (–Ω–∞–∫–ª–æ–Ω –ª–∏–Ω–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏)
                x = np.arange(len(closes))
                slope = np.polyfit(x, closes, 1)[0]
                mean_price = np.mean(closes)
                trend_strength = (slope / mean_price) * 100 if mean_price != 0 else 0
                
                # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ —Å—Ä–µ–¥–Ω–µ–º—É
                if len(volumes) >= 5:
                    avg_volume = np.mean(volumes[-5:])
                    volume_ratio = volumes[-1] / avg_volume if avg_volume != 0 else 1.0
                else:
                    volume_ratio = 1.0
                
                # ATR (Average True Range)
                atr = self._calculate_atr(highs, lows, closes)
                
                # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å (–Ω–∞ –æ—Å–Ω–æ–≤–µ ATR)
                risk_reward = (atr / closes[-1]) * 100 if closes[-1] != 0 else 0
                
                return {
                    'volatility': volatility,
                    'trend_strength': trend_strength,
                    'volume_ratio': volume_ratio,
                    'risk_reward': risk_reward,
                    'price': closes[-1],
                    'atr': atr
                }
                
            except Exception as e:
                if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    log_maker(f"üî• –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {symbol}: {str(e)}")
                    return None
                time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    def _calculate_atr(self, highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç Average True Range"""
        if len(highs) < period or len(closes) < 2:
            return 0.0
        
        tr_values = []
        for i in range(1, len(highs)):
            tr1 = highs[i] - lows[i]
            tr2 = abs(highs[i] - closes[i-1])
            tr3 = abs(lows[i] - closes[i-1])
            tr = max(tr1, tr2, tr3)
            tr_values.append(tr)
        
        return np.mean(tr_values[-period:]) if tr_values else 0.0
    
    def evaluate_coins(self) -> List[Tuple[str, float]]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Å–µ –º–æ–Ω–µ—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏
        current_time = time.time()
        if current_time - self.last_update < self.update_interval:
            return self._get_cached_scores()
        
        scores = []
        self.cache = {}  # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            future_to_coin = {
                executor.submit(self._evaluate_coin, coin): coin
                for coin in self.coin_list
            }
            
            for future in concurrent.futures.as_completed(future_to_coin, timeout=self.timeout):
                coin = future_to_coin[future]
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ future
                    result = future.result(timeout=15)
                    if result:
                        scores.append(result)
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏
                    if "Not supported symbols" not in str(e):
                        log_maker(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ {coin}: {str(e)}")
                    else:
                        # –î–ª—è "Not supported symbols" –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –æ—Ü–µ–Ω–∫—É
                        scores.append((coin, 0.0))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∏
        scores.sort(key=lambda x: x[1], reverse=True)
        self.last_update = current_time
        return scores
    
    def _get_cached_scores(self) -> List[Tuple[str, float]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∏–∑ –∫—ç—à–∞"""
        scores = []
        for coin in self.coin_list:
            if coin in self.cache:
                scores.append((coin, self.cache[coin]['score']))
        scores.sort(key=lambda x: x[1], reverse=True)
        return scores
    
    def _evaluate_coin(self, coin: str) -> Optional[Tuple[str, float]]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        symbol = f"{coin}USDT"
        metrics = self.calculate_metrics(symbol)
        
        if not metrics:
            return None
            
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        weights = {
            'volatility': 0.4,
            'trend_strength': 0.3,
            'volume_ratio': 0.2,
            'risk_reward': 0.1
        }
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–∏–≥–º–æ–∏–¥—É
        normalized = {
            'volatility': self.sigmoid_normalize(metrics['volatility'], 1.0),
            'trend_strength': self.sigmoid_normalize(metrics['trend_strength'], 0.5),
            'volume_ratio': min(max(metrics['volume_ratio'], 0.5), 3.0) / 3.0,
            'risk_reward': self.sigmoid_normalize(metrics['risk_reward'], 1.0)
        }
        
        # –†–∞—Å—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
        score = sum(normalized[k] * weights[k] for k in weights)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.cache[coin] = {
            'metrics': metrics,
            'score': score,
            'normalized': normalized,
            'timestamp': time.time()
        }
        
        return (coin, score)
    
    def get_best_coin(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        scores = self.evaluate_coins()
        if not scores:
            return None
        return scores[0][0]
    
    def get_coin_report(self, coin: str) -> Optional[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –º–æ–Ω–µ—Ç–µ"""
        return self.cache.get(coin)