import time
import json
import logging
from app.services.coin_ranker import CoinRanker
from app.services.coin_selector import CoinSelector
from app.utils.log_helper import log_maker

class CoinRotator:
    def __init__(
        self, 
        initial_coins: list, 
        trading_system,
        rotation_interval: int = 86400,  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        min_hold_candles: int = 12       # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (–≤ —Å–≤–µ—á–∞—Ö)
    ):
        self.coin_list = initial_coins
        self.trading_system = trading_system
        self.rotation_interval = rotation_interval
        self.min_hold_candles = min_hold_candles
        self.ranker = CoinRanker()
        self.selector = CoinSelector(initial_coins)
        self.logger = logging.getLogger("coin_rotator")
        self.logger.setLevel(logging.INFO)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = self.trading_system.state
        self.logger.info(f"‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ä–æ—Ç–∞—Ç–æ—Ä –¥–ª—è {initial_coins}")
        self.logger.info(f"  ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏: {rotation_interval/3600} —á–∞—Å–æ–≤")
        self.logger.info(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ: {min_hold_candles} —Å–≤–µ—á–µ–π")

    def should_rotate(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–æ—Ç–∞—Ü–∏—é"""
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è - —Ä–æ—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞
        if self.trading_system.position_open_time > 0:
            return False
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤ —Å–≤–µ—á–∞—Ö
        current_time = time.time()
        hold_time = current_time - self.state.get("last_rotation_time", 0)
        hold_candles = hold_time / (self.trading_system.strategy.interval * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        if hold_candles < self.min_hold_candles:
            self.logger.info(f"‚è± –£–¥–µ—Ä–∂–∏–≤–∞–µ–º {self.state['current_coin']} –µ—â—ë {self.min_hold_candles - int(hold_candles)} —Å–≤–µ—á")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏
        if hold_time < self.rotation_interval:
            return False
            
        return True

    def rotate_coins(self) -> str:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–æ—Ç–∞—Ü–∏–∏
        if not self.should_rotate():
            return self.state["current_coin"]
            
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã –∏–∑ —Ä–∞–Ω–∫–µ—Ä–∞
        best_coins = self.ranker.get_best_coins(top_n=5)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –º–æ–Ω–µ—Ç –æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        scores = self.selector.evaluate_coins()
        top_scores = [coin for coin, _ in scores[:5]]
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        candidates = set(best_coins + top_scores)
        self.logger.info(f"üèÜ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é: {candidates}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–Ω–µ—Ç—É (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)
        current_coin = self.state["current_coin"]
        candidates.discard(current_coin)
        
        if not candidates:
            self.logger.info("‚è≠Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏")
            return current_coin
            
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–Ω–µ—Ç—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –≤ —Ä–∞–Ω–∫–µ—Ä–µ
        new_coin = best_coins[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state["current_coin"] = new_coin
        self.state["last_rotation_time"] = time.time()
        self.trading_system.save_state()
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –≤ —Ä–∞–Ω–∫–µ—Ä–µ
        self.ranker.record_selection(new_coin)
        
        self.logger.info(f"üîÑ –†–æ—Ç–∞—Ü–∏—è —Å {current_coin} –Ω–∞ {new_coin}")
        return new_coin
    
    def set_current_coin(self, coin: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–Ω–µ—Ç—É"""
        if coin in self.coin_list:
            self.state["current_coin"] = coin
            self.trading_system.save_state()
            self.logger.info(f"‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞: {coin}")

    def update_activity(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª)"""
        # –î–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
        pass