# services/model_trainer.py
import threading
import sys
import os
import time
from app.utils.log_helper import log_maker
import traceback
import logging
import json

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
try:
    from app.strategies.neural_network.trainer import main as train_model
except ImportError:
    log_maker("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é.")
    train_model = None


class ModelTrainer:
    def __init__(self, coin_list, interval="5", epochs=100, max_concurrent=1):
        self.coin_list = coin_list
        self.interval = interval  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        self.epochs = epochs
        self.max_concurrent = max_concurrent
        self.training_queue = []
        self.current_training = 0
        self.thread = threading.Thread(target=self._training_loop, daemon=True)
        self.thread.start()
        self.logger = logging.getLogger("model_trainer")
        self.logger.setLevel(logging.INFO)
        log_maker(
            f"üéì –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç—Ä–µ–Ω–µ—Ä –º–æ–¥–µ–ª–µ–π. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω. –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏–π: {max_concurrent}"
        )

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥–µ–ª–µ–π
        os.makedirs("models", exist_ok=True)

    def add_to_queue(self, coin, force_retrain=False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–Ω–µ—Ç—É –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"""
        model_path = f"models/{coin}_neural_model"
        model_file = f"{model_path}.keras"
        error_path = f"{model_path}.error"
        config_path = f"{model_path}.config"

        if os.path.exists(model_file) and not force_retrain:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
        existing_interval = self._get_model_interval(config_path)
        interval_mismatch = (
            existing_interval != self.interval if existing_interval else False
        )

        # –ü—Ä–∏—á–∏–Ω—ã –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        reasons = []
        if force_retrain:
            reasons.append("–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")
        if interval_mismatch:
            reasons.append(
                f"–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ({existing_interval} ‚â† {self.interval})"
            )
        if not os.path.exists(model_file):
            reasons.append("–º–æ–¥–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        if os.path.exists(error_path):
            reasons.append("–ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è")

        if reasons:
            reason_str = ", ".join(reasons)
            self.logger.info(f"üß† –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ {coin}: {reason_str}")

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if os.path.exists(model_file):
                try:
                    os.remove(model_file)
                    os.remove(f"{model_path}_scaler.npz")
                    self.logger.info(f"üßπ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –¥–ª—è {coin}")
                except Exception as e:
                    self.logger.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            if coin not in self.training_queue:
                # –ù–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã (–±–µ–∑ –º–æ–¥–µ–ª–∏) –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
                if not os.path.exists(model_file) and not os.path.exists(error_path):
                    self.training_queue.insert(0, coin)
                    self.logger.info(
                        f"üöÄ –ú–æ–Ω–µ—Ç–∞ {coin} (–Ω–æ–≤–∞—è) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏ –æ–±—É—á–µ–Ω–∏—è"
                    )
                else:
                    self.training_queue.append(coin)
                    self.logger.info(
                        f"üß† –ú–æ–Ω–µ—Ç–∞ {coin} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"
                    )

            else:
                self.logger.info(f"üß† –ú–æ–Ω–µ—Ç–∞ {coin} —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ")
            return True
        else:
            self.logger.info(
                f"üß† –ú–æ–¥–µ–ª—å –¥–ª—è {coin} –∞–∫—Ç—É–∞–ª—å–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval} –º–∏–Ω)"
            )
            return False

    def _get_model_interval(self, config_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
        if os.path.exists(config_path):
            try:
                with open(config_path, "r") as f:
                    config = json.load(f)
                    return config.get("interval")
            except:
                return None
        return None

    def _save_model_config(self, config_path, interval):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏"""
        try:
            with open(config_path, "w") as f:
                json.dump({"interval": interval}, f)
        except Exception as e:
            log_maker(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")

    def start_periodic_retraining(self, interval_hours=24):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤"""

        def retrain_loop():
            while True:
                time.sleep(interval_hours * 3600)
                self.logger.info(
                    f"üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval} –º–∏–Ω)"
                )
                for coin in self.coin_list:
                    self.add_to_queue(coin, force_retrain=True)

        threading.Thread(target=retrain_loop, daemon=True).start()

    def _training_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ–±—É—á–µ–Ω–∏—è"""
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                if self.training_queue and self.current_training < self.max_concurrent:

                    coin = self.training_queue.pop(0)
                    self.current_training += 1

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    threading.Thread(
                        target=self._train_coin_model, args=(coin,), daemon=True
                    ).start()

                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                log_maker(f"üî• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—É—á–µ–Ω–∏—è: {str(e)}")
                traceback.print_exc()
                time.sleep(30)

    def _train_coin_model(self, coin):
        """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        symbol = f"{coin}USDT"
        model_path = f"models/{coin}_neural_model"
        config_path = f"{model_path}.config"

        try:
            log_maker(f"üß† –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol} ({self.interval} –º–∏–Ω)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è
            if train_model is None:
                raise ImportError("–§—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            original_argv = sys.argv.copy()
            sys.argv = [
                "trainer.py",
                f"--symbol={symbol}",
                f"--interval={self.interval}",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                f"--epochs={str(self.epochs)}",
                f"--model_path={model_path}",
            ]

            log_maker(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è: {' '.join(sys.argv[1:])}")

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è
            train_model()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
            self._save_model_config(config_path, self.interval)

            log_maker(
                f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è {symbol} ({self.interval} –º–∏–Ω) —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            )

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol} ({self.interval} –º–∏–Ω): {str(e)}"
            log_maker(error_msg)
            traceback.print_exc()

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ—à–∏–±–∫–∏
            try:
                with open(f"{model_path}.error", "w") as f:
                    f.write(error_msg)
            except:
                pass

        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            sys.argv = original_argv
            self.current_training -= 1

    def force_retrain_all(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        log_maker("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
        for coin in self.coin_list:
            self.add_to_queue(coin, force_retrain=True)
