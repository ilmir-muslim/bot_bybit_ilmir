import time
import traceback
from app.trading.data_provider import DataProvider
from app.trading.order_executor import OrderExecutor
from app.utils.log_helper import log_maker
from app.utils.candle_sync import CandleSynchronizer

class TradingBot:
    def __init__(self, strategy, symbol: str, interval: str, controller=None):
        self.symbol = symbol
        self.interval = int(interval)
        self.strategy = strategy
        self.controller = controller
        self.data_provider = DataProvider(symbol, interval)
        if controller:
            self.data_provider.controller = controller
        self.order_executor = OrderExecutor(symbol)
        self.synchronizer = CandleSynchronizer(self.interval)
        self._running = False
        self.first_run = True
        log_maker(f"ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol}")
        log_maker(f"  ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {type(strategy).__name__}")
        log_maker(f"  ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω—É—Ç")
        log_maker(f"  ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ —Å–≤–µ—á–∞–º–∏: –≤–∫–ª—é—á–µ–Ω–∞")

    def run_once(self):
        start_time = time.time()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rotator –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
            if hasattr(self.strategy, 'rotator') and self.strategy.rotator is not None:
                self.strategy.rotator.update_activity()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ API
            open_positions = self.order_executor.bybit.get_open_positions()
            if open_positions:
                current_coin = open_positions[0]['coin']
                if current_coin != self.symbol.replace('USDT', ''):
                    log_maker(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: –ø–æ–∑–∏—Ü–∏—è {current_coin} vs –±–æ—Ç {self.symbol}")
                    self.controller.switch_coin(current_coin)
                    return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ —Å–≤–µ—á–∞–º–∏
            sleep_time = self.synchronizer.time_until_next_candle()
            max_wait = 60 if self.first_run else 300
            self.first_run = False
            
            if sleep_time > 1:
                actual_wait = min(sleep_time, max_wait)
                if actual_wait > 5:
                    log_maker(f"‚è± –û–∂–∏–¥–∞–Ω–∏–µ —Å–≤–µ—á–∏: {actual_wait:.1f} —Å–µ–∫")
                time.sleep(actual_wait)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
            coin = self.symbol.replace("USDT", "")
            usdt_balance = self.order_executor.bybit.get_balance("USDT")
            coin_balance = self.order_executor.bybit.get_balance(coin)
            log_maker(f"üí∞ –ë–∞–ª–∞–Ω—Å: {usdt_balance:.2f} USDT, {coin_balance:.4f} {coin}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            candles = self.data_provider.get_candles(limit=100)
            
            if not candles or len(candles) < 10:
                log_maker(f"‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(candles)} —Å–≤–µ—á–µ–π")
                return
                
            # –ê–Ω–∞–ª–∏–∑ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è
            action = self.strategy.should_trade(candles)
            
            if action:
                log_maker(f"‚ö° –°–∏–≥–Ω–∞–ª: {action}")
                self.strategy.execute_trade(action, self.order_executor)
                
        except Exception as e:
            log_maker(f"üí• –û—à–∏–±–∫–∞: {type(e).__name__} - {str(e)}")
            traceback.print_exc()
        finally:
            total_duration = time.time() - start_time
            log_maker(f"‚è± –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_duration:.2f} —Å–µ–∫")
            time.sleep(max(10, self.interval * 60 - total_duration))
            
    def start(self):
        self._running = True
        log_maker(f"‚ñ∂Ô∏è [BOT] –ó–∞–ø—É—â–µ–Ω ({type(self.strategy).__name__} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)")
        while self._running:
            self.run_once()

    def stop(self):
        self._running = False
        log_maker("‚èπÔ∏è [BOT] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")