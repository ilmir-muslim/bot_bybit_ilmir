import os
import json
import time
import numpy as np
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Tuple, Optional


class CoinRanker:
    def __init__(self, data_path: str = "data/coin_ranking.json", min_trades: int = 5):
        self.data_path = data_path
        self.min_trades = min_trades
        self.logger = logging.getLogger("coin_ranker")
        self.logger.setLevel(logging.INFO)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        self.default_settings = {
            "trial_period": 10,
            "min_success_rate": 0.5,
            "min_avg_profit": 0.005,
            "evaluation_period": 30,
            "initial_boost": 2,
            "decay_factor": 0.95,
            "max_coins": 30,
            "min_trade_density": 0.3,
        }

        # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.data = self.load_data()

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if "settings" not in self.data:
            self.data["settings"] = self.default_settings
        else:
            for key, value in self.default_settings.items():
                if key not in self.data["settings"]:
                    self.data["settings"][key] = value

        os.makedirs("logs", exist_ok=True)

    def get_best_coins(self, top_n: int = 5) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        ranked = self.get_ranked_coins()
        return [coin for coin, _ in ranked[:top_n]]

    def load_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π"""
        os.makedirs(os.path.dirname(self.data_path), exist_ok=True)

        if os.path.exists(self.data_path):
            try:
                with open(self.data_path, "r") as f:
                    data = json.load(f)
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    self._migrate_old_data(data)
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    self.fix_statistics(data)
                    return data
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return self._create_initial_data()
        return self._create_initial_data()

    def _migrate_old_data(self, data: dict):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è active_coins
        for coin, coin_data in data.get("active_coins", {}).items():
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è timestamp –≤ ISO —Å—Ç—Ä–æ–∫—É
            if "first_selected" in coin_data and isinstance(
                coin_data["first_selected"], (int, float)
            ):
                coin_data["first_selected"] = datetime.fromtimestamp(
                    coin_data["first_selected"]
                ).isoformat()

            if "last_selected" in coin_data and isinstance(
                coin_data["last_selected"], (int, float)
            ):
                coin_data["last_selected"] = datetime.fromtimestamp(
                    coin_data["last_selected"]
                ).isoformat()

        # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = data.get("statistics", {})
        if "last_rotation" in stats and isinstance(
            stats["last_rotation"], (int, float)
        ):
            stats["last_rotation"] = datetime.fromtimestamp(
                stats["last_rotation"]
            ).isoformat()

        if "created_at" in stats and isinstance(stats["created_at"], (int, float)):
            stats["created_at"] = datetime.fromtimestamp(
                stats["created_at"]
            ).isoformat()

    def fix_statistics(self, data: dict):
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∏—Å–∫–∞–∂–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É selections"""
        for coin, coin_data in data.get("active_coins", {}).items():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è first_selected
                first_selected = coin_data["first_selected"]
                if not isinstance(first_selected, str):
                    # –ï—Å–ª–∏ —ç—Ç–æ timestamp, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    if isinstance(first_selected, (int, float)):
                        coin_data["first_selected"] = datetime.fromtimestamp(
                            first_selected
                        ).isoformat()
                    else:
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ fallback
                        coin_data["first_selected"] = datetime.now().isoformat()
                        self.logger.warning(f"üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ first_selected –¥–ª—è {coin}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è last_selected
                last_selected = coin_data["last_selected"]
                if not isinstance(last_selected, str):
                    # –ï—Å–ª–∏ —ç—Ç–æ timestamp, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    if isinstance(last_selected, (int, float)):
                        coin_data["last_selected"] = datetime.fromtimestamp(
                            last_selected
                        ).isoformat()
                    else:
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ fallback
                        coin_data["last_selected"] = datetime.now().isoformat()
                        self.logger.warning(f"üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ last_selected –¥–ª—è {coin}")

                # –¢–µ–ø–µ—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime –æ–±—ä–µ–∫—Ç—ã
                first = datetime.fromisoformat(coin_data["first_selected"])
                last = datetime.fromisoformat(coin_data["last_selected"])
                days_active = (last - first).days + 1

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º selections –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if coin_data["selections"] > days_active:
                    self.logger.info(
                        f"üõ†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º selections –¥–ª—è {coin}: {coin_data['selections']} -> {days_active}"
                    )
                    coin_data["selections"] = days_active

                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º trial_used
                    trial_period = data["settings"]["trial_period"]
                    coin_data["trial_used"] = min(coin_data["trial_used"], trial_period)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {coin}: {e}")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
                coin_data["first_selected"] = datetime.now().isoformat()
                coin_data["last_selected"] = datetime.now().isoformat()
                coin_data["selections"] = 1
                coin_data["trial_used"] = 0

    def _create_initial_data(self) -> Dict:
        return {
            "active_coins": {},
            "archived_coins": {},
            "statistics": {
                "total_rotations": 0,
                "last_rotation": None,
                "created_at": datetime.now().isoformat(),
            },
            "settings": self.default_settings,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º self.default_settings
        }

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.data_path, "w") as f:
                json.dump(self.data, f, indent=2)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def add_new_coin(self, coin: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if coin in self.data["active_coins"] or coin in self.data["archived_coins"]:
            return

        if len(self.data["active_coins"]) >= self.data["settings"]["max_coins"]:
            self._remove_lowest_performer()

        self.data["active_coins"][coin] = {
            "selections": 0,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤ (–∏—Ç–µ—Ä–∞—Ü–∏–π)
            "trades": 0,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
            "profitable_trades": 0,
            "total_profit": 0.0,
            "last_selected": None,
            "first_selected": datetime.now().isoformat(),
            "last_trade": None,
            "trial_used": 0,
            "performance_score": 0.0,
            "priority": 1.0,  # –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }
        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞: {coin}")
        self.save_data()

    def add_new_coins(self, new_coins: List[str]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç"""
        for coin in new_coins:
            self.add_new_coin(coin)

    def record_selection(self, coin: str, is_real_rotation: bool = False):
        """–§–∏–∫—Å–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã (–∏—Ç–µ—Ä–∞—Ü–∏—é)"""
        if coin in self.data["active_coins"]:
            coin_data = self.data["active_coins"][coin]
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º selections –í–°–ï–ì–î–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏)
            coin_data["selections"] += 1

            # –£–º–µ–Ω—å—à–∞–µ–º "–±—É—Å—Ç" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
            if (
                is_real_rotation
                and coin_data["trial_used"] < self.data["settings"]["trial_period"]
            ):
                coin_data["trial_used"] += 1
                # –ü–ª–∞–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∑–∫–æ–≥–æ
                decay = 1.0 - (0.5 / self.data["settings"]["trial_period"])
                coin_data["priority"] *= decay
                self.logger.info(
                    f"üîß {coin}: —É–º–µ–Ω—å—à–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (trial {coin_data['trial_used']}/{self.data['settings']['trial_period']})"
                )
            coin_data["last_selected"] = datetime.now().isoformat()
            self.data["statistics"]["total_rotations"] += 1
            self.data["statistics"]["last_rotation"] = datetime.now().isoformat()
            self.save_data()

    def record_trade_result(self, coin: str, profit: float):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏"""
        if coin in self.data["active_coins"]:
            coin_data = self.data["active_coins"][coin]
            coin_data["trades"] += 1
            coin_data["last_trade"] = datetime.now().isoformat()

            if profit > 0:
                coin_data["profitable_trades"] += 1

            coin_data["total_profit"] += profit
            self.save_data()

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._update_performance_score(coin)

            self.logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ –¥–ª—è {coin}: –ø—Ä–∏–±—ã–ª—å={profit:.2f} USDT")

    def _update_performance_score(self, coin: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö"""
        coin_data = self.data["active_coins"][coin]
        trades = coin_data["trades"]
        selections = coin_data["selections"]

        # –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –º–æ–Ω–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        if trades > 0:
            success_rate = coin_data["profitable_trades"] / trades
            avg_profit = coin_data["total_profit"] / trades
            score = success_rate * avg_profit * 100
        # –ù–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        else:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–ª –≤–º–µ—Å—Ç–æ 0
            score = 0.5

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±—É—Å—Ç –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç
            if coin_data["selections"] == 0:
                score += 1.0

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±—É—Å—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç
        trial_period = self.data["settings"]["trial_period"]
        if coin_data["trial_used"] < trial_period:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–π –±—É—Å—Ç –Ω–∞ –≤–µ—Å—å –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            boost = self.data["settings"]["initial_boost"]
            score *= boost

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±—É—Å—Ç –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –≤—ã–±–æ—Ä–æ–≤
            if coin_data["selections"] < 3:
                score *= 1.5

        coin_data["performance_score"] = max(0.1, score)  # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–ø—É—Å–∫–∞–µ–º –Ω–∏–∂–µ 0.1
        self.save_data()

    def get_coin_performance(self, coin: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã"""
        if coin not in self.data["active_coins"]:
            return {"status": "unknown", "score": 0, "priority": 0}

        coin_data = self.data["active_coins"][coin]
        return {
            "status": self._get_performance_status(coin_data),
            "score": coin_data["performance_score"],
            "priority": coin_data["priority"],
            "trades": coin_data["trades"],
            "selections": coin_data["selections"],
            "trade_density": (
                coin_data["trades"] / coin_data["selections"]
                if coin_data["selections"] > 0
                else 0
            ),
            "success_rate": (
                coin_data["profitable_trades"] / coin_data["trades"]
                if coin_data["trades"] > 0
                else 0
            ),
            "avg_profit": (
                coin_data["total_profit"] / coin_data["trades"]
                if coin_data["trades"] > 0
                else 0
            ),
        }

    def _get_performance_status(self, coin_data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        trades = coin_data["trades"]

        if trades == 0:
            return "untested"

        if coin_data["trial_used"] < self.data["settings"]["trial_period"]:
            return "trial"

        success_rate = coin_data["profitable_trades"] / trades
        avg_profit = coin_data["total_profit"] / trades

        if (
            success_rate >= 0.7
            and avg_profit >= self.data["settings"]["min_avg_profit"]
        ):
            return "excellent"
        elif (
            success_rate >= 0.6
            and avg_profit >= self.data["settings"]["min_avg_profit"] * 0.8
        ):
            return "good"
        elif success_rate >= 0.5:
            return "neutral"
        else:
            return "poor"

    def get_ranked_coins(self) -> List[Tuple[str, float]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        ranked = []
        for coin, data in self.data["active_coins"].items():
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ = –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å * –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            score = data["performance_score"] * data["priority"]
            ranked.append((coin, score))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞
        ranked.sort(key=lambda x: x[1], reverse=True)
        return ranked

    def should_keep_coin(self, coin: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–æ–Ω–µ—Ç—É"""
        perf = self.get_coin_performance(coin)
        return perf["status"] in ["excellent", "good", "trial"]

    def evaluate_and_cleanup(self):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, —É–¥–∞–ª—è—è –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ"""
        coins_to_remove = []

        for coin, data in list(self.data["active_coins"].items()):
            # –£–¥–∞–ª—è–µ–º –º–æ–Ω–µ—Ç—ã —Å –ø–ª–æ—Ö–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞
            if data["trial_used"] >= self.data["settings"]["trial_period"]:
                perf_status = self._get_performance_status(data)
                if perf_status == "poor":
                    coins_to_remove.append(coin)

            # –£–¥–∞–ª—è–µ–º –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã–±–∏—Ä–∞–ª–∏—Å—å –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è
            if data["last_selected"]:
                last_selected = datetime.fromisoformat(data["last_selected"])
                if (datetime.now() - last_selected) > timedelta(days=30):
                    coins_to_remove.append(coin)

        for coin in coins_to_remove:
            self.logger.info(
                f"–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã {coin} –∏–∑-–∑–∞ –ø–ª–æ—Ö–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            )
            self.data["archived_coins"][coin] = self.data["active_coins"].pop(coin)

        if coins_to_remove:
            self.save_data()

    def get_next_coin(self, current_coin: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        ranked_coins = self.get_ranked_coins()

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞ –≤ —Ç–æ–ø–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
        if ranked_coins and current_coin == ranked_coins[0][0]:
            return current_coin

        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–Ω–µ—Ç—É
        for coin, score in ranked_coins:
            if coin == current_coin:
                continue

            perf = self.get_coin_performance(coin)
            if perf["status"] not in ["poor", "unknown"]:
                return coin

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–Ω–µ—Ç—É
        return current_coin

    def _remove_lowest_performer(self):
        """–£–¥–∞–ª—è–µ—Ç –º–æ–Ω–µ—Ç—É —Å —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
        ranked = self.get_ranked_coins()
        if not ranked:
            return

        lowest_coin = ranked[-1][0]
        self.logger.info(
            f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–π —Å–ª–∞–±–æ–π –º–æ–Ω–µ—Ç—ã {lowest_coin} –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞"
        )
        self.data["archived_coins"][lowest_coin] = self.data["active_coins"].pop(
            lowest_coin
        )
        self.save_data()

    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        report = [
            "üìä Coin Ranking System Report",
            f"‚Ä¢ –í—Å–µ–≥–æ —Ä–æ—Ç–∞—Ü–∏–π: {self.data['statistics']['total_rotations']}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: {len(self.data['active_coins'])}",
            f"‚Ä¢ –í –∞—Ä—Ö–∏–≤–µ: {len(self.data['archived_coins'])}",
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {self.data['statistics']['created_at']}",
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–æ—Ç–∞—Ü–∏—è: {self.data['statistics']['last_rotation'] or 'N/A'}",
            "",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:",
        ]

        for key, value in self.data["settings"].items():
            report.append(f"  ‚Ä¢ {key}: {value}")

        report.append("\nüèÜ –¢–æ–ø-5 –º–æ–Ω–µ—Ç:")
        ranked = self.get_ranked_coins()[:5]

        for i, (coin, score) in enumerate(ranked, 1):
            perf = self.get_coin_performance(coin)
            report.append(
                f"{i}. {coin}: "
                f"score={score:.2f}, "
                f"status={perf['status']}, "
                f"priority={perf['priority']:.2f}, "
                f"trades={perf['trades']}, "
                f"success={perf['success_rate']:.1%}"
            )

        return "\n".join(report)
