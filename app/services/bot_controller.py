import os
import json
import time
import threading
import logging
from app.services.bot_runner import TradingBot
from app.services.bybit_service import BybitService
from app.strategies import NeuralStrategy, MovingAverageStrategy
from app.utils.log_helper import log_maker, log_error

class BotController:
    def __init__(self, strategy_type='neural', rotator=None):
        self.thread = None
        self.strategy_type = strategy_type
        self._running = threading.Event()
        self.bybit = BybitService()
        self.state = self.load_bot_state()
        self.rotator = rotator
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ API
        open_positions = self.bybit.get_open_positions()
        if open_positions:
            self.symbol = open_positions[0]['symbol']
            self.position_coin = open_positions[0]['coin']
            log_maker(f"‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.symbol}")
        else:
            self.symbol = self._clean_symbol(self.state.get("current_coin", "SOL"))
            self.position_coin = self.symbol.replace('USDT', '')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.interval = "5" if strategy_type == 'neural' else "3"
        self.strategy = self._initialize_strategy()
        self.bot = TradingBot(
            strategy=self.strategy,
            symbol=self.symbol, 
            interval=self.interval,
            controller=self
        )
        
        log_maker(f"‚öôÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {type(self.strategy).__name__}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval} –º–∏–Ω—É—Ç")
        self.save_bot_state()

    def load_bot_state(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open("bot_state.json", "r") as f:
                return json.load(f)
        except:
            return {
                "current_coin": "SOL",
                "symbol": "SOLUSDT",
                "position_coin": "SOL"
            }

    def _clean_symbol(self, symbol_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞"""
        base = symbol_str.replace('USDT', '')
        return f"{base}USDT"
    
    def _initialize_strategy(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        coin = self.symbol.replace('USDT', '')
        model_base_path = f"models/{coin}_neural_model"
        
        # –í—ã–±–æ—Ä –º–µ–∂–¥—É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∏ MA —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        if self.strategy_type != 'neural':
            return MovingAverageStrategy(
                self.symbol, 
                self.interval,
                trading_system=self
            )
        
        try:
            strategy = NeuralStrategy(
                self.symbol, 
                bybit_service=self.bybit,
                model_path=model_base_path,
                rotator=self.rotator,  
                trading_system=self,
                interval=self.interval
            )
            log_maker(f"üß† –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è {self.symbol}")
            return strategy
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            log_maker("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é MovingAverage —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–∞–∫ fallback")
            return MovingAverageStrategy(
                self.symbol, 
                self.interval,
                trading_system=self
            )
    
    def save_bot_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        state = {
            "current_coin": self.position_coin,
            "symbol": self.symbol,
            "position_coin": self.position_coin
        }
        with open("bot_state.json", "w") as f:
            json.dump(state, f, indent=2)

    def switch_coin(self, new_coin: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É"""
        log_maker(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ {new_coin}")
        self.position_coin = new_coin
        self.symbol = f"{new_coin}USDT"
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã
        self.strategy = self._initialize_strategy()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        self.bot = TradingBot(
            strategy=self.strategy,
            symbol=self.symbol,
            interval=self.interval,
            controller=self
        )
        
        self.save_bot_state()
        log_maker(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {new_coin}")

    def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        if self.thread and self.thread.is_alive():
            return
        self._running.set()
        self.thread = threading.Thread(target=self._run_bot_loop, daemon=True)
        self.thread.start()
        log_maker("‚ñ∂Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        if self.thread:
            self._running.clear()
            self.thread.join(timeout=5)
        log_maker("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def status(self):
        """–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        return "running" if self._running.is_set() else "stopped"

    def _run_bot_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        while self._running.is_set():
            try:
                self.bot.run_once()
            except Exception as e:
                log_error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                time.sleep(60)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
bot_controller = BotController()