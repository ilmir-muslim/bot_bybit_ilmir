# ===== ./app/trader/data_provider.py =====
from app.services.bybit_service import BybitService
from app.utils.log_helper import log_maker

class DataProvider:
    def __init__(self, symbol: str, interval: str):
        self.symbol = symbol
        self.interval = interval
        self.bybit = BybitService()
        self.controller = None
    
    def get_candles(self, limit: int = 200):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if self.controller and hasattr(self.controller, 'preloaded_data'):
            coin = self.symbol.replace('USDT', '')
            if coin in self.controller.preloaded_data:
                preloaded = self.controller.preloaded_data[coin]
                if len(preloaded) >= limit:
                    return preloaded[-limit:]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
        try:
            candles = self.bybit.get_candles(
                self.symbol, 
                interval=self.interval, 
                limit=limit
            )
            
            if len(candles) < limit // 2:
                log_maker(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π: {len(candles)} –∏–∑ {limit}")
                
            return candles
        except Exception as e:
            log_maker(f"üî• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []