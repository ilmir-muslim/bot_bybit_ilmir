from decimal import ROUND_DOWN, Decimal
from app.notifier import send_telegram_message
from app.utils.log_helper import log_maker
from pybit.unified_trading import HTTP
from app.services.bybit_service import BybitService
from app.config import BYBIT_API_KEY, BYBIT_API_SECRET, IS_TESTNET

client = HTTP(
    testnet=IS_TESTNET,
    api_key=BYBIT_API_KEY,
    api_secret=BYBIT_API_SECRET,
    recv_window=15000,
)
bybit = BybitService()



def validate_qty_precision(symbol: str, qty: float):
    precision = bybit.get_qty_precision(symbol)
    parts = str(qty).split(".")
    decimal_digits = len(parts[1]) if len(parts) == 2 else 0

    if decimal_digits > precision:
        send_telegram_message(
            f"üö® [CRITICAL] qty = {qty} —Å–æ–¥–µ—Ä–∂–∏—Ç {decimal_digits} –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, "
            f"—á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é —Ç–æ—á–Ω–æ—Å—Ç—å ({precision}) –¥–ª—è {symbol}. "
            f"–£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `round_qty(...)`!"
        )
        raise ValueError(
            f"[CRITICAL] qty={qty} —Å–æ–¥–µ—Ä–∂–∏—Ç {decimal_digits} –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, "
            f"—á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é —Ç–æ—á–Ω–æ—Å—Ç—å ({precision}) –¥–ª—è {symbol}. "
            f"–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è round_qty(...)!"
        )



def translate_status(status):
    return {
        "Filled": "–∏—Å–ø–æ–ª–Ω–µ–Ω–æ",
        "Cancelled": "–æ—Ç–º–µ–Ω–µ–Ω–æ",
        "Rejected": "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        "New": "–Ω–æ–≤—ã–π",
        "PartiallyFilled": "—á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ",
    }.get(status, status)




def get_price_history(symbol: str, interval: str = "3", limit: int = 100):
    """–¢–û–õ–¨–ö–û API-–¥–∞–Ω–Ω—ã–µ"""
    try:
        return bybit.get_candles(
            symbol=symbol,
            interval=interval,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
            limit=limit
        )
    except Exception as e:
        log_maker(f"üìâ [ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {e}")
        return []

