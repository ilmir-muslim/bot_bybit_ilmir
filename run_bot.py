#!/usr/bin/env python3
import logging
import time
import traceback
import os
from app.services.bot_controller import BotController, bot_controller
from app.utils import load_coin_list
from app.services.trading_system import TradingSystem
from app.trading.order_executor import OrderExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/bot_system.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('main')

def setup_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    os.makedirs("models", exist_ok=True)
    os.makedirs("logs", exist_ok=True)
    os.makedirs("data", exist_ok=True)

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    setup_directories()
    
    coin_list = load_coin_list("coins_list.txt")
    logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–Ω–µ—Ç: {len(coin_list)}")
    
    trading_system = TradingSystem(coin_list=coin_list)
    trading_system.start()
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π rotator
    bot_controller = BotController(rotator=trading_system.rotator)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
    position_coin = trading_system.state.get("position_coin", "")
    if position_coin:
        trading_system.current_coin = position_coin
        trading_system.rotator.set_current_coin(position_coin)
        logger.info(f"‚è™ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏: {position_coin}")
    
    
    logger.info(f"üèÅ –ù–∞—á–∞–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞: {trading_system.current_coin}")

    bot_controller.start()
    logger.info("ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    try:
        logger.info("üîÑ –í—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        last_health_check = time.time()
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            if bot_controller.status() != "running":
                logger.error("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                bot_controller.start()
            
            # –†–æ—Ç–∞—Ü–∏—è –º–æ–Ω–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if not trading_system.position_open_time:
                try:
                    current_coin = trading_system.rotator.rotate_coins()
                    if current_coin != trading_system.current_coin:
                        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–æ–Ω–µ—Ç—É —Å {trading_system.current_coin} –Ω–∞ {current_coin}")
                        
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–Ω–µ—Ç—ã
                        prev_symbol = f"{trading_system.current_coin}USDT"
                        executor = OrderExecutor(prev_symbol)
                        executor.clean_residuals(threshold=0.0001)
                        
                        trading_system.switch_coin(current_coin)
                        bot_controller.switch_coin(current_coin)
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            try:
                if trading_system.position_open_time:
                    symbol = f"{trading_system.current_coin}USDT"
                    logger.info(f"‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                    positions = trading_system.bybit.get_open_positions()
                    position_exists = any(
                        pos['coin'] == trading_system.current_coin 
                        for pos in positions
                    )
                    
                    if position_exists:
                        executor = OrderExecutor(symbol)
                        if executor.execute_force_close():
                            trading_system.position_open_time = 0
                            logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
                    else:
                        logger.info("‚è© –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥")
                        trading_system.position_open_time = 0
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            
            # Health check
            if time.time() - last_health_check > 3600:
                logger.info("ü©∫ Health check:")
                logger.info(f"Bot status: {bot_controller.status()}")
                last_health_check = time.time()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            time.sleep(60)
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(traceback.format_exc())
    finally:
        logger.info("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        bot_controller.stop()
        trading_system.stop()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    main()