import pytest
from app.services.coin_selector import CoinSelector
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
REAL_COINS = ["BTC", "ETH", "SOL", "ADA", "DOGE"]

@pytest.fixture(scope="module")
def coin_selector():
    return CoinSelector(REAL_COINS)

def test_real_data_loading(coin_selector):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏"""
    logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂–∏ Bybit...")
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    for coin in REAL_COINS:
        symbol = f"{coin}USDT"
        start_time = time.time()
        metrics = coin_selector.calculate_metrics(symbol)
        duration = time.time() - start_time
        
        assert metrics is not None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}"
        logger.info(f"‚úÖ {symbol} –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {duration:.2f} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        assert metrics['volatility'] > 0, f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0 –¥–ª—è {symbol}"
        assert metrics['trend_strength'] != 0, f"–¢—Ä–µ–Ω–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º –¥–ª—è {symbol}"
        assert metrics['volume_ratio'] > 0, f"–û–±—ä–µ–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º –¥–ª—è {symbol}"
        
        logger.info(f"  –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics['volatility']:.2f}%")
        logger.info(f"  –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {metrics['trend_strength']:.2f}%")
        logger.info(f"  –û—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {metrics['volume_ratio']:.2f}x")
        logger.info(f"  –†–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: {metrics['risk_reward']:.2f}%")

def test_real_coin_evaluation(coin_selector):
    """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –º–æ–Ω–µ—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üìä –û—Ü–µ–Ω–∫–∞ –º–æ–Ω–µ—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    start_time = time.time()
    scores = coin_selector.evaluate_coins()
    duration = time.time() - start_time
    
    assert len(scores) > 0, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É"
    logger.info(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n–†–µ–π—Ç–∏–Ω–≥ –º–æ–Ω–µ—Ç:")
    for i, (coin, score) in enumerate(scores):
        report = coin_selector.get_coin_report(coin)
        logger.info(f"{i+1}. {coin}: {score:.4f}")
        logger.info(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {report['metrics']['volatility']:.2f}%")
        logger.info(f"   –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {report['metrics']['trend_strength']:.2f}%")
        logger.info(f"   –û—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {report['metrics']['volume_ratio']:.2f}x")
        logger.info(f"   –†–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: {report['metrics']['risk_reward']:.2f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–æ–Ω–µ—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ü–µ–Ω–∫–µ
    evaluated_coins = [c[0] for c in scores]
    for coin in REAL_COINS:
        assert coin in evaluated_coins, f"–ú–æ–Ω–µ—Ç–∞ {coin} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ü–µ–Ω–∫–µ"
    
    logger.info("–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")